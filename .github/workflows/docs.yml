name: docs

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    steps:    
    - uses: actions/checkout@v3
    - uses: FedericoCarboni/setup-ffmpeg@v3
      id: setup-ffmpeg
      with:
        # A specific version to download, may also be "release" or a specific version
        # like "6.1.0". At the moment semver specifiers (i.e. >=6.1.0) are supported
        # only on Windows, on other platforms they are allowed but version is matched
        # exactly regardless.
        ffmpeg-version: release
        # Target architecture of the ffmpeg executable to install. Defaults to the
        # system architecture. Only x64 and arm64 are supported (arm64 only on Linux).
        architecture: ''
        # Linking type of the binaries. Use "shared" to download shared binaries and 
        # "static" for statically linked ones. Shared builds are currently only available
        # for windows releases. Defaults to "static"
        linking-type: static
        # As of version 3 of this action, builds are no longer downloaded from GitHub
        # except on Windows: https://github.com/GyanD/codexffmpeg/releases.
        github-token: ${{ github.server_url == 'https://github.com' && github.token || '' }}

    - name: Initialise Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry
      run: pipx install poetry

    - name: Cache Poetry packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        poetry env use "${{ matrix.python-version }}"
        poetry install

    - name: Build Sphinx docs
      run: poetry run sphinx-build -b html docs gh-pages

    - name: Run tests and generate coverage report
      run: |
        poetry run coverage run -m pytest
        echo "COVERAGE=$(poetry run coverage report --precision 2 | grep TOTAL | tr -s ' ' | cut -f 4 -d " ")" >> $GITHUB_ENV
        poetry run coverage html --directory gh-pages/coverage

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'gh-pages'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Create Coverage Badge
      uses: schneegans/dynamic-badges-action@v1.1.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 1235174e828f9bb5ccdbd8506617355c
        filename: coverage-badge.json
        label: coverage
        message: ${{ env.COVERAGE }}
        color: green
